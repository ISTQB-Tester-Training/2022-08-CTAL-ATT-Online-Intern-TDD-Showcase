// In Datei TimePairTest.java

package tddshowcasetestpackage;

import tddshowcasepackage.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class TimePairTest {

    TimePair aTimePair = new TimePair();

    @Test
    public void timeDifferenceTest_1h () {
        aTimePair.setTimeValues("10:00", "11:00");
        assertEquals(1.0, aTimePair.getTimeDifference(), 0.0);
    }

    @Test
    public void timeDifferenceTest_0h () {
        aTimePair.setTimeValues("10:00", "10:00");
        assertEquals(0.0, aTimePair.getTimeDifference(), 0.0);
    }

    @Test
    public void timeDifferenceTest_invalidStartTimeFormat() {
        aTimePair.setTimeValues("SS:00", "11:00");

        TimePair.TimePairException aTimePairException = assertThrows(TimePair.TimePairException.class,
                () -> aTimePair.getTimeDifference());

        assertEquals(501, (long) aTimePairException.getMessageNr());
        System.out.println("Invalid START Time - Error Number: " + aTimePairException.getMessageNr() + " " +
                           "Error text: " + aTimePairException.getMessageText());
    }

    @Test
    public void timeDifferenceTest_invalidEndTimeFormat() {
        aTimePair.setTimeValues("11:00", "EE:00");

        TimePair.TimePairException aTimePairException = assertThrows(TimePair.TimePairException.class,
                () -> aTimePair.getTimeDifference());

        assertEquals(502, (long) aTimePairException.getMessageNr());
        System.out.println("Invalid END Time - Error Number: " + aTimePairException.getMessageNr() + " " +
                "Error text: " + aTimePairException.getMessageText());
    }

    @Test
    public void timeDifferenceTest_missingParam() {

        TimePair.TimePairException aTimePairException = assertThrows(TimePair.TimePairException.class,
                () -> aTimePair.getTimeDifference());

        assertEquals(500, (long) aTimePairException.getMessageNr());
        System.out.println("Missing Parameter - Error Number: " + aTimePairException.getMessageNr() + " " +
                "Error text: " + aTimePairException.getMessageText());
    }

     @Test
    public void timeDifferenceTest_invalidTimePeriod() {
        aTimePair.setTimeValues("19:00", "03:00");

        TimePair.TimePairException aTimePairException = assertThrows(TimePair.TimePairException.class,
                () -> aTimePair.getTimeDifference());

        assertEquals(503, (long) aTimePairException.getMessageNr());
        System.out.println("Invalid TIME PERIOD - Error Number: " + aTimePairException.getMessageNr() + " " +
                "Error text: " + aTimePairException.getMessageText());
    }

}

// --------------------------------------------

// In Datei TimePair.java

package tddshowcasepackage;

import java.time.*;
import java.time.temporal.ChronoUnit;

public class TimePair {

    private String startTime = null;
    private String endTime = null;

    public TimePair() {}

    public void setTimeValues (String strStartTime, String strEndTime) {
        startTime = strStartTime;
        endTime = strEndTime;
    }

    public double getTimeDifference(String strStartTime, String strEndTime) {
        setTimeValues(strStartTime, strEndTime);
        return getTimeDifference();
    }

    public double getTimeDifference() {

        if (startTime == null || endTime == null) {
            throw new TimePairException("Start oder End Time not set", 500);
        }

        try { LocalTime checkStartTime = LocalTime.parse(startTime);
        }
        catch (Exception e) {
            throw new TimePairException(e.getMessage() + "(Input value: " + startTime + ")", 501);
        }

        try { LocalTime checkEndTime = LocalTime.parse(endTime);
        }
        catch (Exception e) {
            throw new TimePairException(e.getMessage() + "(Input value: " + endTime + ")", 502);
        }

        double aTimeDifference = LocalTime.parse(startTime).until(LocalTime.parse(endTime), ChronoUnit.MINUTES)/60.0;
        if (aTimeDifference < 0.0) {
            throw new TimePairException("Invalid time period " +
                    startTime + " / " +
                    endTime +
                    " time difference " + aTimeDifference + " hours", 503);
        }
        return aTimeDifference;
    }

    public class TimePairException extends RuntimeException {
        private final String message;
        private final Long messageNr;

        public TimePairException (String argMessage, long argMessageNr) {
            super(argMessage);
            message = argMessage;
            messageNr = argMessageNr;
        }
        public String getMessageText() {
            return message;
        }
        public Long getMessageNr() {
            return messageNr;
        }
    }
}

